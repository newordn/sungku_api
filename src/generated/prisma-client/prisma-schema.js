module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type Account {
  id: ID!
  balance: Float!
  owner: User!
  createdAt: DateTime!
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction!]
}

type AccountConnection {
  pageInfo: PageInfo!
  edges: [AccountEdge]!
  aggregate: AggregateAccount!
}

input AccountCreateInput {
  id: ID
  balance: Float!
  owner: UserCreateOneWithoutAccountInput!
  transactions: TransactionCreateManyWithoutInitiatorInput
}

input AccountCreateOneWithoutOwnerInput {
  create: AccountCreateWithoutOwnerInput
  connect: AccountWhereUniqueInput
}

input AccountCreateOneWithoutTransactionsInput {
  create: AccountCreateWithoutTransactionsInput
  connect: AccountWhereUniqueInput
}

input AccountCreateWithoutOwnerInput {
  id: ID
  balance: Float!
  transactions: TransactionCreateManyWithoutInitiatorInput
}

input AccountCreateWithoutTransactionsInput {
  id: ID
  balance: Float!
  owner: UserCreateOneWithoutAccountInput!
}

type AccountEdge {
  node: Account!
  cursor: String!
}

enum AccountOrderByInput {
  id_ASC
  id_DESC
  balance_ASC
  balance_DESC
  createdAt_ASC
  createdAt_DESC
}

type AccountPreviousValues {
  id: ID!
  balance: Float!
  createdAt: DateTime!
}

type AccountSubscriptionPayload {
  mutation: MutationType!
  node: Account
  updatedFields: [String!]
  previousValues: AccountPreviousValues
}

input AccountSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AccountWhereInput
  AND: [AccountSubscriptionWhereInput!]
  OR: [AccountSubscriptionWhereInput!]
  NOT: [AccountSubscriptionWhereInput!]
}

input AccountUpdateInput {
  balance: Float
  owner: UserUpdateOneRequiredWithoutAccountInput
  transactions: TransactionUpdateManyWithoutInitiatorInput
}

input AccountUpdateManyMutationInput {
  balance: Float
}

input AccountUpdateOneRequiredWithoutTransactionsInput {
  create: AccountCreateWithoutTransactionsInput
  update: AccountUpdateWithoutTransactionsDataInput
  upsert: AccountUpsertWithoutTransactionsInput
  connect: AccountWhereUniqueInput
}

input AccountUpdateOneWithoutOwnerInput {
  create: AccountCreateWithoutOwnerInput
  update: AccountUpdateWithoutOwnerDataInput
  upsert: AccountUpsertWithoutOwnerInput
  delete: Boolean
  disconnect: Boolean
  connect: AccountWhereUniqueInput
}

input AccountUpdateWithoutOwnerDataInput {
  balance: Float
  transactions: TransactionUpdateManyWithoutInitiatorInput
}

input AccountUpdateWithoutTransactionsDataInput {
  balance: Float
  owner: UserUpdateOneRequiredWithoutAccountInput
}

input AccountUpsertWithoutOwnerInput {
  update: AccountUpdateWithoutOwnerDataInput!
  create: AccountCreateWithoutOwnerInput!
}

input AccountUpsertWithoutTransactionsInput {
  update: AccountUpdateWithoutTransactionsDataInput!
  create: AccountCreateWithoutTransactionsInput!
}

input AccountWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  balance: Float
  balance_not: Float
  balance_in: [Float!]
  balance_not_in: [Float!]
  balance_lt: Float
  balance_lte: Float
  balance_gt: Float
  balance_gte: Float
  owner: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  transactions_every: TransactionWhereInput
  transactions_some: TransactionWhereInput
  transactions_none: TransactionWhereInput
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
}

input AccountWhereUniqueInput {
  id: ID
}

type AggregateAccount {
  count: Int!
}

type AggregateTransaction {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createAccount(data: AccountCreateInput!): Account!
  updateAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
  updateManyAccounts(data: AccountUpdateManyMutationInput!, where: AccountWhereInput): BatchPayload!
  upsertAccount(where: AccountWhereUniqueInput!, create: AccountCreateInput!, update: AccountUpdateInput!): Account!
  deleteAccount(where: AccountWhereUniqueInput!): Account
  deleteManyAccounts(where: AccountWhereInput): BatchPayload!
  createTransaction(data: TransactionCreateInput!): Transaction!
  updateTransaction(data: TransactionUpdateInput!, where: TransactionWhereUniqueInput!): Transaction
  updateManyTransactions(data: TransactionUpdateManyMutationInput!, where: TransactionWhereInput): BatchPayload!
  upsertTransaction(where: TransactionWhereUniqueInput!, create: TransactionCreateInput!, update: TransactionUpdateInput!): Transaction!
  deleteTransaction(where: TransactionWhereUniqueInput!): Transaction
  deleteManyTransactions(where: TransactionWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  account(where: AccountWhereUniqueInput!): Account
  accounts(where: AccountWhereInput, orderBy: AccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Account]!
  accountsConnection(where: AccountWhereInput, orderBy: AccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AccountConnection!
  transaction(where: TransactionWhereUniqueInput!): Transaction
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction]!
  transactionsConnection(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TransactionConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  account(where: AccountSubscriptionWhereInput): AccountSubscriptionPayload
  transaction(where: TransactionSubscriptionWhereInput): TransactionSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Transaction {
  id: ID!
  amount: Float!
  type: String!
  createdAt: DateTime!
  initiator: Account!
  receiver: ID!
}

type TransactionConnection {
  pageInfo: PageInfo!
  edges: [TransactionEdge]!
  aggregate: AggregateTransaction!
}

input TransactionCreateInput {
  id: ID
  amount: Float!
  type: String!
  initiator: AccountCreateOneWithoutTransactionsInput!
  receiver: ID!
}

input TransactionCreateManyWithoutInitiatorInput {
  create: [TransactionCreateWithoutInitiatorInput!]
  connect: [TransactionWhereUniqueInput!]
}

input TransactionCreateWithoutInitiatorInput {
  id: ID
  amount: Float!
  type: String!
  receiver: ID!
}

type TransactionEdge {
  node: Transaction!
  cursor: String!
}

enum TransactionOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
  type_ASC
  type_DESC
  createdAt_ASC
  createdAt_DESC
  receiver_ASC
  receiver_DESC
}

type TransactionPreviousValues {
  id: ID!
  amount: Float!
  type: String!
  createdAt: DateTime!
  receiver: ID!
}

input TransactionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  receiver: ID
  receiver_not: ID
  receiver_in: [ID!]
  receiver_not_in: [ID!]
  receiver_lt: ID
  receiver_lte: ID
  receiver_gt: ID
  receiver_gte: ID
  receiver_contains: ID
  receiver_not_contains: ID
  receiver_starts_with: ID
  receiver_not_starts_with: ID
  receiver_ends_with: ID
  receiver_not_ends_with: ID
  AND: [TransactionScalarWhereInput!]
  OR: [TransactionScalarWhereInput!]
  NOT: [TransactionScalarWhereInput!]
}

type TransactionSubscriptionPayload {
  mutation: MutationType!
  node: Transaction
  updatedFields: [String!]
  previousValues: TransactionPreviousValues
}

input TransactionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TransactionWhereInput
  AND: [TransactionSubscriptionWhereInput!]
  OR: [TransactionSubscriptionWhereInput!]
  NOT: [TransactionSubscriptionWhereInput!]
}

input TransactionUpdateInput {
  amount: Float
  type: String
  initiator: AccountUpdateOneRequiredWithoutTransactionsInput
  receiver: ID
}

input TransactionUpdateManyDataInput {
  amount: Float
  type: String
  receiver: ID
}

input TransactionUpdateManyMutationInput {
  amount: Float
  type: String
  receiver: ID
}

input TransactionUpdateManyWithoutInitiatorInput {
  create: [TransactionCreateWithoutInitiatorInput!]
  delete: [TransactionWhereUniqueInput!]
  connect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  disconnect: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutInitiatorInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutInitiatorInput!]
  deleteMany: [TransactionScalarWhereInput!]
  updateMany: [TransactionUpdateManyWithWhereNestedInput!]
}

input TransactionUpdateManyWithWhereNestedInput {
  where: TransactionScalarWhereInput!
  data: TransactionUpdateManyDataInput!
}

input TransactionUpdateWithoutInitiatorDataInput {
  amount: Float
  type: String
  receiver: ID
}

input TransactionUpdateWithWhereUniqueWithoutInitiatorInput {
  where: TransactionWhereUniqueInput!
  data: TransactionUpdateWithoutInitiatorDataInput!
}

input TransactionUpsertWithWhereUniqueWithoutInitiatorInput {
  where: TransactionWhereUniqueInput!
  update: TransactionUpdateWithoutInitiatorDataInput!
  create: TransactionCreateWithoutInitiatorInput!
}

input TransactionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  initiator: AccountWhereInput
  receiver: ID
  receiver_not: ID
  receiver_in: [ID!]
  receiver_not_in: [ID!]
  receiver_lt: ID
  receiver_lte: ID
  receiver_gt: ID
  receiver_gte: ID
  receiver_contains: ID
  receiver_not_contains: ID
  receiver_starts_with: ID
  receiver_not_starts_with: ID
  receiver_ends_with: ID
  receiver_not_ends_with: ID
  AND: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
}

input TransactionWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  name: String
  phone: String!
  password: String
  code: String
  account: Account
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String
  phone: String!
  password: String
  code: String
  account: AccountCreateOneWithoutOwnerInput
}

input UserCreateOneWithoutAccountInput {
  create: UserCreateWithoutAccountInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAccountInput {
  id: ID
  name: String
  phone: String!
  password: String
  code: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  phone_ASC
  phone_DESC
  password_ASC
  password_DESC
  code_ASC
  code_DESC
}

type UserPreviousValues {
  id: ID!
  name: String
  phone: String!
  password: String
  code: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  phone: String
  password: String
  code: String
  account: AccountUpdateOneWithoutOwnerInput
}

input UserUpdateManyMutationInput {
  name: String
  phone: String
  password: String
  code: String
}

input UserUpdateOneRequiredWithoutAccountInput {
  create: UserCreateWithoutAccountInput
  update: UserUpdateWithoutAccountDataInput
  upsert: UserUpsertWithoutAccountInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutAccountDataInput {
  name: String
  phone: String
  password: String
  code: String
}

input UserUpsertWithoutAccountInput {
  update: UserUpdateWithoutAccountDataInput!
  create: UserCreateWithoutAccountInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  account: AccountWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  phone: String
}
`
      }
    